package griffith;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Groups {
	
	/* Samantha Avila de Medeiros
	 * ID: 3125216
	 * Date of submission:
	 */
	
	
	/*
	 * Task one
	 * The program has a main function (main1) that calls a method (printEven) to print a specific 
	 * number of even numbers from a predefined array of integers. The code is structured in a simple 
	 * and easy to understand way, using a for-each loop and if conditions to achieve the desired result.
	 */	 

    public static void printEven(int[] array, int amount) {
        int number = 0; 

        System.out.print(" ");
        for (int inter : array) {
        	if (inter % 2 == 0) {  
        		System.out.print(inter + " ");
        		number++;

        		if (number == amount) {
        			break;  
		                }
		            }
		        }

        System.out.println();
		    }

    public static void main1(String[] args) {
    	int[] numbers = {1, 3, 4, 2, 3, 2, 4, 3, 5, 7, 6, 4, 7, 8, 9, 10};
    	int valuePrint = 5;

    	printEven(numbers, valuePrint);
		    }


	/*
	 * Task two
	 * The code provides two functions, `isSortedAsc` and `isSortedDesc`, which check whether an array 
	 * of strings is sorted ascending or descending, respectively. The `main11` method uses these 
	 * functions to check two example arrays and prints the results. The functions use lexicographic 
	 * string comparison to determine ordering, returning `true` if the array is ordered as specified 
	 * and `false` otherwise.
	 */
	 
    public static boolean isSortedAsc(String[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            if (array[i].compareTo(array[i + 1]) > 0) {
                return false; 
                }
        }
        return true; 
        }

    public static boolean isSortedDesc(String[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            if (array[i].compareTo(array[i + 1]) < 0) {
                return false; 
            }
        }
        return true; 

    }

    public static void main11(String[] args) {
        String[] ascendingArray = {"apple", "banana", "grape", "orange"};
        String[] descendingArray = {"zebra", "lion", "elephant", "bear"};

        System.out.println("Ascending Array is sorted: " + isSortedAsc(ascendingArray));
        System.out.println("Descending Array is sorted: " + isSortedDesc(descendingArray));
    }

	
	/*
	 * Task three
	 * Java code performs grammatical corrections on a list of strings. It ensures that each string 
	 * starts with a capital letter, has no whitespace at the beginning or end, ends with ".", 
	 * "?" or "!", and does not contain multiple consecutive spaces. The `removeMultipleSpaces` 
	 * method is used to handle the last requirement, replacing sequences of spaces with a single 
	 * space.
	 */


	public static void main1111(String[] args) {
		ArrayList<String> arr = new ArrayList<>(Arrays.asList("hello to you! "," it is cold today", "Goodbye everybody", "wait what time is it?"));
		arr = fixGrammar(arr);
		System.out.println(arr);
	    }

	public static ArrayList<String> fixGrammar(ArrayList<String> arr) {
		for (int i = 0; i < arr.size(); i++) {
			String str = arr.get(i);

			str = str.substring(0, 1).toUpperCase() + str.substring(1);

			str = str.trim();

			if (str.endsWith(".") || str.endsWith("?") || str.endsWith("!")) {
	                
			} else if (str.contains(" ") && (str.endsWith(".") || str.endsWith("?") || str.endsWith("!"))) {
				str = str.substring(0, str.length() - 1);
	            	} else {
	            		str = str + ".";
	            	}

			str = removeMultipleSpaces(str);

			arr.set(i, str);
	        }
		return arr;
	    }

	public static String removeMultipleSpaces(String str) {
		String regex = "\\s+";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(str);
		str = matcher.replaceAll(" ");
		return str;
	    }
	
	/*
	 * Task Four
	 * Java code finds the intersection between two integer arrays. It uses sets to identify unique 
	 * elements in the first array and a list to store the elements that are present in both arrays. 
	 * The result is printed to the console. The code is modular and efficient in detecting common 
	 * elements.
	 */
	
	public static void main111(String[] args) {
		int[] firstArray = {1, 3, 4, 6, 2};
		int[] secondArray = {6, 3, 5, 8, 0};
		
		int[] result = intersection(firstArray, secondArray);

		System.out.println("Intersection: " + Arrays.toString(result));
	    }

	    public static int[] intersection(int[] first, int[] second) {
	        Set<Integer> set = new HashSet<>();
	        List<Integer> resultList = new ArrayList<>();

	        for (int num : first) {
	            set.add(num);
	        }

	        for (int num : second) {
	            if (set.contains(num)) {
	                resultList.add(num);
	            }
	        }
	        
	        int[] resultArray = new int[resultList.size()];
	        for (int i = 0; i < resultList.size(); i++) {
	            resultArray[i] = resultList.get(i);
	        }

	        return resultArray;
	    
	

}
}
