package griffith;

import java.util.Random;
import java.util.Scanner;

public class StringMethods {
	
	/* Samantha Avila de Medeiros
	 * ID: 3125216
	 * Date of submission:
	 */
	 


	//public static void main(String[] args) {
		
		
		
		/*
		 * Task one
		 * In this task, I asked the user to enter a number to be reverse. In my code, I put an equality 
		 * operator to assign the values, as well as an arithmetic operator to give me the reverse.
		 
		 
		  
		
		Scanner scan = new Scanner(System.in);
        System.out.print("Enter a number to be reversed: ");
        
        int number = scan.nextInt();
        int reverseNumber = reverseInt(number);
        
        System.out.println("Your reversed number is: " + reverseNumber);
    }

    public static int reverseInt(int number) {
    	
        int numberReversed = 0;
        while (number != 0) {
            int numeral = number % 10;
            numberReversed = numberReversed * 10 + numeral;
            number /= 10;
        }
        return numberReversed;
        
        
    }
    
    

    	/*
    	 * Task two
    	 * In this second task, it is to count the consonants, vowels and numbers that the sentence has. 
    	 * Therefore, I asked the user to enter a sentence in order to be counted. I made three different 
    	 * counters for each of the characters to be counted: one for each. This way, my code was able to 
    	 * count each of them.
    	 
    
    
    
    public static void main(String[] args) {
    	
    	System.out.println();
    	System.out.println();
    	
    	Scanner scan2 = new Scanner(System.in);
    	
    	System.out.println("Enter a sentence: ");
    	String input = scan2.nextLine();

    	int numberCount = numberDigits(input);
    	int vowelCount = countVowels(input);
    	int consonantCount = countConsonants(input);
    	
    	System.out.println("There are " + consonantCount + "consonants");
    	System.out.println("There are " + vowelCount + "vowels");
    	System.out.println("There are " + numberCount + "digits");
    	
    	

    }
	public static int numberDigits(String text) {
		
		int count = 0;
            for (int i = 0; i < text.length(); i++) {
                if (Character.isDigit(text.charAt(i))) {
                    count++;
                }
            }
            return count;
        }

	public static int countVowels(String text) {
		
		int count = 0;
		String vowels = "aeiouAEIOU";
			for (int i = 0; i < text.length(); i++) {
				if (vowels.contains(String.valueOf(text.charAt(i))) && !Character.isDigit(text.charAt(i))) {
                    count++;
                	}
				}
            	return count;
        }

	public static int countConsonants(String text) {
		
		int count = 0;
		String consonants = "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ";
			for (int i = 0; i < text.length(); i++) {
				if (consonants.contains(String.valueOf(text.charAt(i))) && !Character.isDigit(text.charAt(i))) {
                    count++;
                }
            }
				return count;
        
    }

*/

		/*
		 * Task three
		 * In this third task, my code was able to automatically generate a strong password. I wrote a 
		 * character (char) for each of the eight cases of the password (my code generates a strong 
		 * password of 8 characters): one for a special character, one for a lowercase letter and one for 
		 * an uppercase letter, which merge and generate the strong password.
		 */

	public static void main(String[] args) {
		
		String passwordStrong = generatePasswordStrong();
		System.out.println("Your secure password is " + passwordStrong);
    }

    public static String generatePasswordStrong() {
        StringBuilder passwordStrong = new StringBuilder();
        Random random = new Random();

        for (int i = 0; i < 2; i++) {
            int digit = random.nextInt(10);
            passwordStrong.append(digit);
        }
        
        char lowercase = (char) (random.nextInt(26) + 'a');
        passwordStrong.append(lowercase);
        
        char uppercase = (char) (random.nextInt(26) + 'A');
        passwordStrong.append(uppercase);

        char special = getSpecialCharacter();
        passwordStrong.append(special);

        while (passwordStrong.length() < 8) {
            char nextChar = (char) (random.nextInt(26) + 'a');
            passwordStrong.append(nextChar);
        }

        return passwordStrong.toString();
    }


    public static char getSpecialCharacter() {
        Random random = new Random();
        char[] specialChars = {'%', 'H', '&', '$'};
        return specialChars[random.nextInt(specialChars.length)];
    }

	}
	
